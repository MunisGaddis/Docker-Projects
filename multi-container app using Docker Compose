Here's a complete example of a multi-container app using Docker Compose with:

Node.js backend
MongoDB database
Volumes for data persistence
Networks for internal communication
Environment variables for configuration

📁 Project Structure
multi-container-node-mongo/
├── backend/
│   ├── Dockerfile
│   ├── package.json
│   └── index.js
├── docker-compose.yml
***********************************************************************************
🖥️ backend/index.js

const express = require('express');
const mongoose = require('mongoose');

const app = express();
const port = 3000;

app.use(express.json());

mongoose.connect(process.env.MONGO_URI, {
  useNewUrlParser: true,
  useUnifiedTopology: true
}).then(() => console.log('MongoDB connected'))
  .catch(err => console.error('MongoDB connection error:', err));

app.get('/', (req, res) => {
  res.send('Hello from Node.js backend!');
});

app.listen(port, () => {
  console.log(`Server is running on port ${port}`);
});
**************************************************************************
📦 backend/package.json

{
  "name": "node-backend",
  "version": "1.0.0",
  "main": "index.js",
  "scripts": {
    "start": "node index.js"
  },
  "dependencies": {
    "express": "^4.18.2",
    "mongoose": "^7.0.0"
  }
}
*****************************************************************
Dockerfile

FROM node:18

WORKDIR /app

COPY package*.json ./
RUN npm install

COPY . .

EXPOSE 3000

CMD ["npm", "start"]
********************************************************************
🧩 docker-compose.yml

version: '3.9'

services:
  backend:
    build: ./backend
    ports:
      - "3000:3000"
    environment:
      - MONGO_URI=mongodb://mongo:27017/mydb
    depends_on:
      - mongo
    networks:
      - app-network

  mongo:
    image: mongo:6
    volumes:
      - mongo-data:/data/db
    networks:
      - app-network

volumes:
  mongo-data:

networks:
  app-network:
    driver: bridge
**************************************************************************
✅ To Run the App

docker-compose up --build
Access the backend at http://localhost:3000
MongoDB will persist data in the named volume mongo-data
